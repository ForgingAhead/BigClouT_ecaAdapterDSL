/*
 * generated by Xtext 2.13.0
 */
package nii.bigclout.ecaadapter.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RunTimeModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nii.bigclout.ecaadapter.Dsl.RunTimeModel");
		private final Assignment cAppDataAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cAppDataAppMetaDataParserRuleCall_0 = (RuleCall)cAppDataAssignment.eContents().get(0);
		
		//RunTimeModel:
		//	appData+=AppMetaData*
		//	//envData += EnvironmentMetaData*	
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////servicesData += ServiceMetaData*  
		//appData+=AppMetaData*
		public Assignment getAppDataAssignment() { return cAppDataAssignment; }
		
		//AppMetaData
		public RuleCall getAppDataAppMetaDataParserRuleCall_0() { return cAppDataAppMetaDataParserRuleCall_0; }
	}
	public class AppMetaDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nii.bigclout.ecaadapter.Dsl.AppMetaData");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAppIDAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAppIDIDTerminalRuleCall_0_0 = (RuleCall)cAppIDAssignment_0.eContents().get(0);
		private final Assignment cSpecificationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSpecificationsAppSpecificationParserRuleCall_1_0 = (RuleCall)cSpecificationsAssignment_1.eContents().get(0);
		
		//AppMetaData:
		//	appID=ID
		//	specifications+=AppSpecification*
		//	//globalRequirements += GlobalRequirement
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//appID=ID specifications+=AppSpecification*
		public Group getGroup() { return cGroup; }
		
		//appID=ID
		public Assignment getAppIDAssignment_0() { return cAppIDAssignment_0; }
		
		//ID
		public RuleCall getAppIDIDTerminalRuleCall_0_0() { return cAppIDIDTerminalRuleCall_0_0; }
		
		//specifications+=AppSpecification*
		public Assignment getSpecificationsAssignment_1() { return cSpecificationsAssignment_1; }
		
		//AppSpecification
		public RuleCall getSpecificationsAppSpecificationParserRuleCall_1_0() { return cSpecificationsAppSpecificationParserRuleCall_1_0; }
	}
	public class AppSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nii.bigclout.ecaadapter.Dsl.AppSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cONKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTriggerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTriggerElementParserRuleCall_1_0 = (RuleCall)cTriggerAssignment_1.eContents().get(0);
		private final Keyword cIFKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionElementParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		private final Keyword cDOKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cActionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cActionElementParserRuleCall_5_0 = (RuleCall)cActionAssignment_5.eContents().get(0);
		
		//AppSpecification:
		//	'ON' trigger+=Element*
		//	'IF' condition+=Element*
		//	'DO' action+=Element;
		@Override public ParserRule getRule() { return rule; }
		
		//'ON' trigger+=Element* 'IF' condition+=Element* 'DO' action+=Element
		public Group getGroup() { return cGroup; }
		
		//'ON'
		public Keyword getONKeyword_0() { return cONKeyword_0; }
		
		//trigger+=Element*
		public Assignment getTriggerAssignment_1() { return cTriggerAssignment_1; }
		
		//Element
		public RuleCall getTriggerElementParserRuleCall_1_0() { return cTriggerElementParserRuleCall_1_0; }
		
		//'IF'
		public Keyword getIFKeyword_2() { return cIFKeyword_2; }
		
		//condition+=Element*
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }
		
		//Element
		public RuleCall getConditionElementParserRuleCall_3_0() { return cConditionElementParserRuleCall_3_0; }
		
		//'DO'
		public Keyword getDOKeyword_4() { return cDOKeyword_4; }
		
		//action+=Element
		public Assignment getActionAssignment_5() { return cActionAssignment_5; }
		
		//Element
		public RuleCall getActionElementParserRuleCall_5_0() { return cActionElementParserRuleCall_5_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nii.bigclout.ecaadapter.Dsl.Element");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMeaningAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMeaningIDTerminalRuleCall_0_0 = (RuleCall)cMeaningAssignment_0.eContents().get(0);
		private final Assignment cConceptAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConceptConceptParserRuleCall_1_0 = (RuleCall)cConceptAssignment_1.eContents().get(0);
		
		//Element:
		//	meaning=ID
		//	concept=Concept;
		@Override public ParserRule getRule() { return rule; }
		
		//meaning=ID concept=Concept
		public Group getGroup() { return cGroup; }
		
		//meaning=ID
		public Assignment getMeaningAssignment_0() { return cMeaningAssignment_0; }
		
		//ID
		public RuleCall getMeaningIDTerminalRuleCall_0_0() { return cMeaningIDTerminalRuleCall_0_0; }
		
		//concept=Concept
		public Assignment getConceptAssignment_1() { return cConceptAssignment_1; }
		
		//Concept
		public RuleCall getConceptConceptParserRuleCall_1_0() { return cConceptConceptParserRuleCall_1_0; }
	}
	public class ConceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nii.bigclout.ecaadapter.Dsl.Concept");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReferenceNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReferenceNameIDTerminalRuleCall_0_0 = (RuleCall)cReferenceNameAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Concept:
		//	referenceName=ID
		//	value=Value;
		@Override public ParserRule getRule() { return rule; }
		
		//referenceName=ID value=Value
		public Group getGroup() { return cGroup; }
		
		//referenceName=ID
		public Assignment getReferenceNameAssignment_0() { return cReferenceNameAssignment_0; }
		
		//ID
		public RuleCall getReferenceNameIDTerminalRuleCall_0_0() { return cReferenceNameIDTerminalRuleCall_0_0; }
		
		//value=Value
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_1_0() { return cValueValueParserRuleCall_1_0; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nii.bigclout.ecaadapter.Dsl.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBOOLEANTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEXTENDED_IDParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		///**
		// ServiceMetaData:
		//	{ServiceMetaData}
		//	serviceID = ID
		//	
		//;
		//
		//EnvironmentMetaData:
		//	{EnvironmentMetaData}
		//	(envAttribute=EnvironmentAttribute)
		//;
		//
		//EnvironmentAttribute:
		//	envAttributeID=ID
		//;
		//
		//Transition:
		//	attributeID=ID
		//	from = Value
		//	to = Value
		//;
		//*/ Value:
		//	BOOLEAN | INT | ID | EXTENDED_ID;
		@Override public ParserRule getRule() { return rule; }
		
		//BOOLEAN | INT | ID | EXTENDED_ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BOOLEAN
		public RuleCall getBOOLEANTerminalRuleCall_0() { return cBOOLEANTerminalRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
		
		//EXTENDED_ID
		public RuleCall getEXTENDED_IDParserRuleCall_3() { return cEXTENDED_IDParserRuleCall_3; }
	}
	public class NUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nii.bigclout.ecaadapter.Dsl.NUMBER");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//NUMBER ecore::EBigDecimal:
		//	INT | INT '.' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT | INT '.' INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//INT '.' INT
		public Group getGroup_1() { return cGroup_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_2() { return cINTTerminalRuleCall_1_2; }
	}
	public class EXTENDED_IDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nii.bigclout.ecaadapter.Dsl.EXTENDED_ID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//EXTENDED_ID:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final RunTimeModelElements pRunTimeModel;
	private final AppMetaDataElements pAppMetaData;
	private final AppSpecificationElements pAppSpecification;
	private final ElementElements pElement;
	private final ConceptElements pConcept;
	private final ValueElements pValue;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tINT;
	private final NUMBERElements pNUMBER;
	private final TerminalRule tID;
	private final EXTENDED_IDElements pEXTENDED_ID;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRunTimeModel = new RunTimeModelElements();
		this.pAppMetaData = new AppMetaDataElements();
		this.pAppSpecification = new AppSpecificationElements();
		this.pElement = new ElementElements();
		this.pConcept = new ConceptElements();
		this.pValue = new ValueElements();
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "nii.bigclout.ecaadapter.Dsl.BOOLEAN");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "nii.bigclout.ecaadapter.Dsl.INT");
		this.pNUMBER = new NUMBERElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "nii.bigclout.ecaadapter.Dsl.ID");
		this.pEXTENDED_ID = new EXTENDED_IDElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("nii.bigclout.ecaadapter.Dsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//RunTimeModel:
	//	appData+=AppMetaData*
	//	//envData += EnvironmentMetaData*	
	//;
	public RunTimeModelElements getRunTimeModelAccess() {
		return pRunTimeModel;
	}
	
	public ParserRule getRunTimeModelRule() {
		return getRunTimeModelAccess().getRule();
	}
	
	//AppMetaData:
	//	appID=ID
	//	specifications+=AppSpecification*
	//	//globalRequirements += GlobalRequirement
	//;
	public AppMetaDataElements getAppMetaDataAccess() {
		return pAppMetaData;
	}
	
	public ParserRule getAppMetaDataRule() {
		return getAppMetaDataAccess().getRule();
	}
	
	//AppSpecification:
	//	'ON' trigger+=Element*
	//	'IF' condition+=Element*
	//	'DO' action+=Element;
	public AppSpecificationElements getAppSpecificationAccess() {
		return pAppSpecification;
	}
	
	public ParserRule getAppSpecificationRule() {
		return getAppSpecificationAccess().getRule();
	}
	
	//Element:
	//	meaning=ID
	//	concept=Concept;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Concept:
	//	referenceName=ID
	//	value=Value;
	public ConceptElements getConceptAccess() {
		return pConcept;
	}
	
	public ParserRule getConceptRule() {
		return getConceptAccess().getRule();
	}
	
	///**
	// ServiceMetaData:
	//	{ServiceMetaData}
	//	serviceID = ID
	//	
	//;
	//
	//EnvironmentMetaData:
	//	{EnvironmentMetaData}
	//	(envAttribute=EnvironmentAttribute)
	//;
	//
	//EnvironmentAttribute:
	//	envAttributeID=ID
	//;
	//
	//Transition:
	//	attributeID=ID
	//	from = Value
	//	to = Value
	//;
	//*/ Value:
	//	BOOLEAN | INT | ID | EXTENDED_ID;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//terminal BOOLEAN returns ecore::EBoolean:
	//	'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//NUMBER ecore::EBigDecimal:
	//	INT | INT '.' INT;
	public NUMBERElements getNUMBERAccess() {
		return pNUMBER;
	}
	
	public ParserRule getNUMBERRule() {
		return getNUMBERAccess().getRule();
	}
	
	//terminal ID:
	//	'a'..'z' | 'A'..'Z' | '_' | '0'..'9' | ':' | '-'+;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//EXTENDED_ID:
	//	ID ('.' ID)*;
	public EXTENDED_IDElements getEXTENDED_IDAccess() {
		return pEXTENDED_ID;
	}
	
	public ParserRule getEXTENDED_IDRule() {
		return getEXTENDED_IDAccess().getRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
