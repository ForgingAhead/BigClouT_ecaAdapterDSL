/*
 * generated by Xtext 2.13.0
 */
grammar InternalDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package nii.bigclout.ecaadapter.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package nii.bigclout.ecaadapter.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import nii.bigclout.ecaadapter.services.DslGrammarAccess;

}

@parser::members {

 	private DslGrammarAccess grammarAccess;

    public InternalDslParser(TokenStream input, DslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "RunTimeModel";
   	}

   	@Override
   	protected DslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleRunTimeModel
entryRuleRunTimeModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRunTimeModelRule()); }
	iv_ruleRunTimeModel=ruleRunTimeModel
	{ $current=$iv_ruleRunTimeModel.current; }
	EOF;

// Rule RunTimeModel
ruleRunTimeModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getRunTimeModelAccess().getAppDataAppMetaDataParserRuleCall_0());
			}
			lv_appData_0_0=ruleAppMetaData
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getRunTimeModelRule());
				}
				add(
					$current,
					"appData",
					lv_appData_0_0,
					"nii.bigclout.ecaadapter.Dsl.AppMetaData");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleAppMetaData
entryRuleAppMetaData returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAppMetaDataRule()); }
	iv_ruleAppMetaData=ruleAppMetaData
	{ $current=$iv_ruleAppMetaData.current; }
	EOF;

// Rule AppMetaData
ruleAppMetaData returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_appID_0_0=RULE_ID
				{
					newLeafNode(lv_appID_0_0, grammarAccess.getAppMetaDataAccess().getAppIDIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAppMetaDataRule());
					}
					setWithLastConsumed(
						$current,
						"appID",
						lv_appID_0_0,
						"nii.bigclout.ecaadapter.Dsl.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAppMetaDataAccess().getSpecificationsAppSpecificationParserRuleCall_1_0());
				}
				lv_specifications_1_0=ruleAppSpecification
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAppMetaDataRule());
					}
					add(
						$current,
						"specifications",
						lv_specifications_1_0,
						"nii.bigclout.ecaadapter.Dsl.AppSpecification");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleAppSpecification
entryRuleAppSpecification returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAppSpecificationRule()); }
	iv_ruleAppSpecification=ruleAppSpecification
	{ $current=$iv_ruleAppSpecification.current; }
	EOF;

// Rule AppSpecification
ruleAppSpecification returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ON'
		{
			newLeafNode(otherlv_0, grammarAccess.getAppSpecificationAccess().getONKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAppSpecificationAccess().getTriggerElementParserRuleCall_1_0());
				}
				lv_trigger_1_0=ruleElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAppSpecificationRule());
					}
					add(
						$current,
						"trigger",
						lv_trigger_1_0,
						"nii.bigclout.ecaadapter.Dsl.Element");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_2='IF'
		{
			newLeafNode(otherlv_2, grammarAccess.getAppSpecificationAccess().getIFKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAppSpecificationAccess().getConditionElementParserRuleCall_3_0());
				}
				lv_condition_3_0=ruleElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAppSpecificationRule());
					}
					add(
						$current,
						"condition",
						lv_condition_3_0,
						"nii.bigclout.ecaadapter.Dsl.Element");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='DO'
		{
			newLeafNode(otherlv_4, grammarAccess.getAppSpecificationAccess().getDOKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAppSpecificationAccess().getActionElementParserRuleCall_5_0());
				}
				lv_action_5_0=ruleElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAppSpecificationRule());
					}
					add(
						$current,
						"action",
						lv_action_5_0,
						"nii.bigclout.ecaadapter.Dsl.Element");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	iv_ruleElement=ruleElement
	{ $current=$iv_ruleElement.current; }
	EOF;

// Rule Element
ruleElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_meaning_0_0=RULE_ID
				{
					newLeafNode(lv_meaning_0_0, grammarAccess.getElementAccess().getMeaningIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getElementRule());
					}
					setWithLastConsumed(
						$current,
						"meaning",
						lv_meaning_0_0,
						"nii.bigclout.ecaadapter.Dsl.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getElementAccess().getConceptConceptParserRuleCall_1_0());
				}
				lv_concept_1_0=ruleConcept
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElementRule());
					}
					set(
						$current,
						"concept",
						lv_concept_1_0,
						"nii.bigclout.ecaadapter.Dsl.Concept");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleConcept
entryRuleConcept returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConceptRule()); }
	iv_ruleConcept=ruleConcept
	{ $current=$iv_ruleConcept.current; }
	EOF;

// Rule Concept
ruleConcept returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_referenceName_0_0=RULE_ID
				{
					newLeafNode(lv_referenceName_0_0, grammarAccess.getConceptAccess().getReferenceNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConceptRule());
					}
					setWithLastConsumed(
						$current,
						"referenceName",
						lv_referenceName_0_0,
						"nii.bigclout.ecaadapter.Dsl.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConceptAccess().getValueValueParserRuleCall_1_0());
				}
				lv_value_1_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConceptRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"nii.bigclout.ecaadapter.Dsl.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleValue
entryRuleValue returns [String current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current.getText(); }
	EOF;

// Rule Value
ruleValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_BOOLEAN_0=RULE_BOOLEAN
		{
			$current.merge(this_BOOLEAN_0);
		}
		{
			newLeafNode(this_BOOLEAN_0, grammarAccess.getValueAccess().getBOOLEANTerminalRuleCall_0());
		}
		    |
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getValueAccess().getINTTerminalRuleCall_1());
		}
		    |
		this_ID_2=RULE_ID
		{
			$current.merge(this_ID_2);
		}
		{
			newLeafNode(this_ID_2, grammarAccess.getValueAccess().getIDTerminalRuleCall_2());
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueAccess().getEXTENDED_IDParserRuleCall_3());
		}
		this_EXTENDED_ID_3=ruleEXTENDED_ID
		{
			$current.merge(this_EXTENDED_ID_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEXTENDED_ID
entryRuleEXTENDED_ID returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEXTENDED_IDRule()); }
	iv_ruleEXTENDED_ID=ruleEXTENDED_ID
	{ $current=$iv_ruleEXTENDED_ID.current.getText(); }
	EOF;

// Rule EXTENDED_ID
ruleEXTENDED_ID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getEXTENDED_IDAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEXTENDED_IDAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getEXTENDED_IDAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

RULE_BOOLEAN : ('true'|'false');

RULE_INT : ('0'..'9')+;

RULE_ID : ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|':'|'-')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
