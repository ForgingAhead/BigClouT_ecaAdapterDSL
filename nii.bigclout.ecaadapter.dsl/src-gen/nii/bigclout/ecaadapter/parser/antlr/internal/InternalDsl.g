/*
 * generated by Xtext 2.13.0
 */
grammar InternalDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package nii.bigclout.ecaadapter.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package nii.bigclout.ecaadapter.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import nii.bigclout.ecaadapter.services.DslGrammarAccess;

}

@parser::members {

 	private DslGrammarAccess grammarAccess;

    public InternalDslParser(TokenStream input, DslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "RunTimeModel";
   	}

   	@Override
   	protected DslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleRunTimeModel
entryRuleRunTimeModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRunTimeModelRule()); }
	iv_ruleRunTimeModel=ruleRunTimeModel
	{ $current=$iv_ruleRunTimeModel.current; }
	EOF;

// Rule RunTimeModel
ruleRunTimeModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getRunTimeModelAccess().getAppDataAppMetaDataParserRuleCall_0());
			}
			lv_appData_0_0=ruleAppMetaData
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getRunTimeModelRule());
				}
				add(
					$current,
					"appData",
					lv_appData_0_0,
					"nii.bigclout.ecaadapter.Dsl.AppMetaData");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleAppMetaData
entryRuleAppMetaData returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAppMetaDataRule()); }
	iv_ruleAppMetaData=ruleAppMetaData
	{ $current=$iv_ruleAppMetaData.current; }
	EOF;

// Rule AppMetaData
ruleAppMetaData returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='AppMeta'
		{
			newLeafNode(otherlv_0, grammarAccess.getAppMetaDataAccess().getAppMetaKeyword_0());
		}
		(
			(
				lv_appID_1_0=RULE_ID
				{
					newLeafNode(lv_appID_1_0, grammarAccess.getAppMetaDataAccess().getAppIDIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAppMetaDataRule());
					}
					setWithLastConsumed(
						$current,
						"appID",
						lv_appID_1_0,
						"nii.bigclout.ecaadapter.Dsl.ID");
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getAppMetaDataAccess().getLBRACEParserRuleCall_2());
		}
		ruleLBRACE
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAppMetaDataAccess().getSpecificationsAppSpecificationParserRuleCall_3_0());
				}
				lv_specifications_3_0=ruleAppSpecification
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAppMetaDataRule());
					}
					add(
						$current,
						"specifications",
						lv_specifications_3_0,
						"nii.bigclout.ecaadapter.Dsl.AppSpecification");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		{
			newCompositeNode(grammarAccess.getAppMetaDataAccess().getRBRACEParserRuleCall_4());
		}
		ruleRBRACE
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAppSpecification
entryRuleAppSpecification returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAppSpecificationRule()); }
	iv_ruleAppSpecification=ruleAppSpecification
	{ $current=$iv_ruleAppSpecification.current; }
	EOF;

// Rule AppSpecification
ruleAppSpecification returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='on'
		{
			newLeafNode(otherlv_0, grammarAccess.getAppSpecificationAccess().getOnKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAppSpecificationAccess().getTriggerOrElementParserRuleCall_1_0());
				}
				lv_trigger_1_0=ruleOrElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAppSpecificationRule());
					}
					add(
						$current,
						"trigger",
						lv_trigger_1_0,
						"nii.bigclout.ecaadapter.Dsl.OrElement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_2='if'
		{
			newLeafNode(otherlv_2, grammarAccess.getAppSpecificationAccess().getIfKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAppSpecificationAccess().getConditionOrElementParserRuleCall_3_0());
				}
				lv_condition_3_0=ruleOrElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAppSpecificationRule());
					}
					add(
						$current,
						"condition",
						lv_condition_3_0,
						"nii.bigclout.ecaadapter.Dsl.OrElement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='do'
		{
			newLeafNode(otherlv_4, grammarAccess.getAppSpecificationAccess().getDoKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAppSpecificationRule());
					}
				}
				otherlv_5=RULE_ID
				{
					newLeafNode(otherlv_5, grammarAccess.getAppSpecificationAccess().getActionElementCrossReference_5_0());
				}
			)
		)+
	)
;

// Entry rule entryRuleOrElement
entryRuleOrElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrElementRule()); }
	iv_ruleOrElement=ruleOrElement
	{ $current=$iv_ruleOrElement.current; }
	EOF;

// Rule OrElement
ruleOrElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrElementAccess().getAndElementParserRuleCall_0());
		}
		this_AndElement_0=ruleAndElement
		{
			$current = $this_AndElement_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_1='or'
			{
				newLeafNode(otherlv_1, grammarAccess.getOrElementAccess().getOrKeyword_1_0());
			}
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getOrElementAccess().getOrElementLeftAction_1_1(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getOrElementAccess().getRightAndElementParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAndElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrElementRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"nii.bigclout.ecaadapter.Dsl.AndElement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAndElement
entryRuleAndElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndElementRule()); }
	iv_ruleAndElement=ruleAndElement
	{ $current=$iv_ruleAndElement.current; }
	EOF;

// Rule AndElement
ruleAndElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndElementAccess().getDiffEqualElementParserRuleCall_0());
		}
		this_DiffEqualElement_0=ruleDiffEqualElement
		{
			$current = $this_DiffEqualElement_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_1='and'
			{
				newLeafNode(otherlv_1, grammarAccess.getAndElementAccess().getAndKeyword_1_0());
			}
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAndElementAccess().getAndElementLeftAction_1_1(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAndElementAccess().getRightDiffEqualElementParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleDiffEqualElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndElementRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"nii.bigclout.ecaadapter.Dsl.DiffEqualElement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleDiffEqualElement
entryRuleDiffEqualElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDiffEqualElementRule()); }
	iv_ruleDiffEqualElement=ruleDiffEqualElement
	{ $current=$iv_ruleDiffEqualElement.current; }
	EOF;

// Rule DiffEqualElement
ruleDiffEqualElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDiffEqualElementAccess().getCompareElementParserRuleCall_0());
		}
		this_CompareElement_0=ruleCompareElement
		{
			$current = $this_CompareElement_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				otherlv_1='!='
				{
					newLeafNode(otherlv_1, grammarAccess.getDiffEqualElementAccess().getExclamationMarkEqualsSignKeyword_1_0_0());
				}
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getDiffEqualElementAccess().getDiffElementLeftAction_1_0_1(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getDiffEqualElementAccess().getRightCompareElementParserRuleCall_1_0_2_0());
						}
						lv_right_3_0=ruleCompareElement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDiffEqualElementRule());
							}
							set(
								$current,
								"right",
								lv_right_3_0,
								"nii.bigclout.ecaadapter.Dsl.CompareElement");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				otherlv_4='=='
				{
					newLeafNode(otherlv_4, grammarAccess.getDiffEqualElementAccess().getEqualsSignEqualsSignKeyword_1_1_0());
				}
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getDiffEqualElementAccess().getEqualElementLeftAction_1_1_1(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getDiffEqualElementAccess().getRightCompareElementParserRuleCall_1_1_2_0());
						}
						lv_right_6_0=ruleCompareElement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDiffEqualElementRule());
							}
							set(
								$current,
								"right",
								lv_right_6_0,
								"nii.bigclout.ecaadapter.Dsl.CompareElement");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleCompareElement
entryRuleCompareElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompareElementRule()); }
	iv_ruleCompareElement=ruleCompareElement
	{ $current=$iv_ruleCompareElement.current; }
	EOF;

// Rule CompareElement
ruleCompareElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCompareElementAccess().getPlusMinusElementParserRuleCall_0());
		}
		this_PlusMinusElement_0=rulePlusMinusElement
		{
			$current = $this_PlusMinusElement_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				otherlv_1='>'
				{
					newLeafNode(otherlv_1, grammarAccess.getCompareElementAccess().getGreaterThanSignKeyword_1_0_0());
				}
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getCompareElementAccess().getLargerElementLeftAction_1_0_1(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getCompareElementAccess().getRightPlusMinusElementParserRuleCall_1_0_2_0());
						}
						lv_right_3_0=rulePlusMinusElement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCompareElementRule());
							}
							set(
								$current,
								"right",
								lv_right_3_0,
								"nii.bigclout.ecaadapter.Dsl.PlusMinusElement");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				otherlv_4='>='
				{
					newLeafNode(otherlv_4, grammarAccess.getCompareElementAccess().getGreaterThanSignEqualsSignKeyword_1_1_0());
				}
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getCompareElementAccess().getLargerEqualElementLeftAction_1_1_1(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getCompareElementAccess().getRightPlusMinusElementParserRuleCall_1_1_2_0());
						}
						lv_right_6_0=rulePlusMinusElement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCompareElementRule());
							}
							set(
								$current,
								"right",
								lv_right_6_0,
								"nii.bigclout.ecaadapter.Dsl.PlusMinusElement");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				otherlv_7='<'
				{
					newLeafNode(otherlv_7, grammarAccess.getCompareElementAccess().getLessThanSignKeyword_1_2_0());
				}
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getCompareElementAccess().getSmallerElementLeftAction_1_2_1(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getCompareElementAccess().getRightPlusMinusElementParserRuleCall_1_2_2_0());
						}
						lv_right_9_0=rulePlusMinusElement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCompareElementRule());
							}
							set(
								$current,
								"right",
								lv_right_9_0,
								"nii.bigclout.ecaadapter.Dsl.PlusMinusElement");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				otherlv_10='=<'
				{
					newLeafNode(otherlv_10, grammarAccess.getCompareElementAccess().getEqualsSignLessThanSignKeyword_1_3_0());
				}
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getCompareElementAccess().getSmallerEqualElementLeftAction_1_3_1(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getCompareElementAccess().getRightPlusMinusElementParserRuleCall_1_3_2_0());
						}
						lv_right_12_0=rulePlusMinusElement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCompareElementRule());
							}
							set(
								$current,
								"right",
								lv_right_12_0,
								"nii.bigclout.ecaadapter.Dsl.PlusMinusElement");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRulePlusMinusElement
entryRulePlusMinusElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlusMinusElementRule()); }
	iv_rulePlusMinusElement=rulePlusMinusElement
	{ $current=$iv_rulePlusMinusElement.current; }
	EOF;

// Rule PlusMinusElement
rulePlusMinusElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPlusMinusElementAccess().getMultiplicationDivisionElementParserRuleCall_0());
		}
		this_MultiplicationDivisionElement_0=ruleMultiplicationDivisionElement
		{
			$current = $this_MultiplicationDivisionElement_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				otherlv_1='+'
				{
					newLeafNode(otherlv_1, grammarAccess.getPlusMinusElementAccess().getPlusSignKeyword_1_0_0());
				}
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getPlusMinusElementAccess().getPlusElementLeftAction_1_0_1(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getPlusMinusElementAccess().getRightMultiplicationDivisionElementParserRuleCall_1_0_2_0());
						}
						lv_right_3_0=ruleMultiplicationDivisionElement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPlusMinusElementRule());
							}
							set(
								$current,
								"right",
								lv_right_3_0,
								"nii.bigclout.ecaadapter.Dsl.MultiplicationDivisionElement");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				otherlv_4='-'
				{
					newLeafNode(otherlv_4, grammarAccess.getPlusMinusElementAccess().getHyphenMinusKeyword_1_1_0());
				}
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getPlusMinusElementAccess().getMinusElementLeftAction_1_1_1(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getPlusMinusElementAccess().getRightMultiplicationDivisionElementParserRuleCall_1_1_2_0());
						}
						lv_right_6_0=ruleMultiplicationDivisionElement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPlusMinusElementRule());
							}
							set(
								$current,
								"right",
								lv_right_6_0,
								"nii.bigclout.ecaadapter.Dsl.MultiplicationDivisionElement");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleMultiplicationDivisionElement
entryRuleMultiplicationDivisionElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicationDivisionElementRule()); }
	iv_ruleMultiplicationDivisionElement=ruleMultiplicationDivisionElement
	{ $current=$iv_ruleMultiplicationDivisionElement.current; }
	EOF;

// Rule MultiplicationDivisionElement
ruleMultiplicationDivisionElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplicationDivisionElementAccess().getUnaryElementParserRuleCall_0());
		}
		this_UnaryElement_0=ruleUnaryElement
		{
			$current = $this_UnaryElement_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				otherlv_1='*'
				{
					newLeafNode(otherlv_1, grammarAccess.getMultiplicationDivisionElementAccess().getAsteriskKeyword_1_0_0());
				}
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getMultiplicationDivisionElementAccess().getMultiplicationElementLeftAction_1_0_1(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getMultiplicationDivisionElementAccess().getRightUnaryElementParserRuleCall_1_0_2_0());
						}
						lv_right_3_0=ruleUnaryElement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMultiplicationDivisionElementRule());
							}
							set(
								$current,
								"right",
								lv_right_3_0,
								"nii.bigclout.ecaadapter.Dsl.UnaryElement");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				otherlv_4='/'
				{
					newLeafNode(otherlv_4, grammarAccess.getMultiplicationDivisionElementAccess().getSolidusKeyword_1_1_0());
				}
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getMultiplicationDivisionElementAccess().getDivisionElementLeftAction_1_1_1(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getMultiplicationDivisionElementAccess().getRightUnaryElementParserRuleCall_1_1_2_0());
						}
						lv_right_6_0=ruleUnaryElement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMultiplicationDivisionElementRule());
							}
							set(
								$current,
								"right",
								lv_right_6_0,
								"nii.bigclout.ecaadapter.Dsl.UnaryElement");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				otherlv_7='%'
				{
					newLeafNode(otherlv_7, grammarAccess.getMultiplicationDivisionElementAccess().getPercentSignKeyword_1_2_0());
				}
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getMultiplicationDivisionElementAccess().getModuloElementLeftAction_1_2_1(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getMultiplicationDivisionElementAccess().getRightUnaryElementParserRuleCall_1_2_2_0());
						}
						lv_right_9_0=ruleUnaryElement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMultiplicationDivisionElementRule());
							}
							set(
								$current,
								"right",
								lv_right_9_0,
								"nii.bigclout.ecaadapter.Dsl.UnaryElement");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleUnaryElement
entryRuleUnaryElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryElementRule()); }
	iv_ruleUnaryElement=ruleUnaryElement
	{ $current=$iv_ruleUnaryElement.current; }
	EOF;

// Rule UnaryElement
ruleUnaryElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getUnaryElementAccess().getNumber_ObjectAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getUnaryElementAccess().getValueNUMBERParserRuleCall_0_1_0());
					}
					lv_value_1_0=ruleNUMBER
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnaryElementRule());
						}
						set(
							$current,
							"value",
							lv_value_1_0,
							"nii.bigclout.ecaadapter.Dsl.NUMBER");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getUnaryElementAccess().getString_ObjectAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_value_3_0=RULE_STRING
					{
						newLeafNode(lv_value_3_0, grammarAccess.getUnaryElementAccess().getValueSTRINGTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getUnaryElementRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_3_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getUnaryElementAccess().getBoolean_ObjectAction_2_0(),
						$current);
				}
			)
			(
				(
					lv_value_5_0=RULE_BOOLEAN
					{
						newLeafNode(lv_value_5_0, grammarAccess.getUnaryElementAccess().getValueBOOLEANTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getUnaryElementRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_5_0,
							"nii.bigclout.ecaadapter.Dsl.BOOLEAN");
					}
				)
			)
		)
		    |
		(
			otherlv_6='('
			{
				newLeafNode(otherlv_6, grammarAccess.getUnaryElementAccess().getLeftParenthesisKeyword_3_0());
			}
			{
				newCompositeNode(grammarAccess.getUnaryElementAccess().getOrElementParserRuleCall_3_1());
			}
			this_OrElement_7=ruleOrElement
			{
				$current = $this_OrElement_7.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_8=')'
			{
				newLeafNode(otherlv_8, grammarAccess.getUnaryElementAccess().getRightParenthesisKeyword_3_2());
			}
		)
		    |
		(
			otherlv_9='not'
			{
				newLeafNode(otherlv_9, grammarAccess.getUnaryElementAccess().getNotKeyword_4_0());
			}
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getUnaryElementAccess().getNegateElementAction_4_1(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getUnaryElementAccess().getExpUnaryElementParserRuleCall_4_2_0());
					}
					lv_exp_11_0=ruleUnaryElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnaryElementRule());
						}
						set(
							$current,
							"exp",
							lv_exp_11_0,
							"nii.bigclout.ecaadapter.Dsl.UnaryElement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleLBRACE
entryRuleLBRACE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLBRACERule()); }
	iv_ruleLBRACE=ruleLBRACE
	{ $current=$iv_ruleLBRACE.current.getText(); }
	EOF;

// Rule LBRACE
ruleLBRACE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='{'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getLBRACEAccess().getLeftCurlyBracketKeyword());
	}
;

// Entry rule entryRuleRBRACE
entryRuleRBRACE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRBRACERule()); }
	iv_ruleRBRACE=ruleRBRACE
	{ $current=$iv_ruleRBRACE.current.getText(); }
	EOF;

// Rule RBRACE
ruleRBRACE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='}'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getRBRACEAccess().getRightCurlyBracketKeyword());
	}
;

// Entry rule entryRuleNUMBER
entryRuleNUMBER returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNUMBERRule()); }
	iv_ruleNUMBER=ruleNUMBER
	{ $current=$iv_ruleNUMBER.current.getText(); }
	EOF;

// Rule NUMBER
ruleNUMBER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_0());
		}
		    |
		(
			this_INT_1=RULE_INT
			{
				$current.merge(this_INT_1);
			}
			{
				newLeafNode(this_INT_1, grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_1_0());
			}
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNUMBERAccess().getFullStopKeyword_1_1());
			}
			this_INT_3=RULE_INT
			{
				$current.merge(this_INT_3);
			}
			{
				newLeafNode(this_INT_3, grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_1_2());
			}
		)
	)
;

RULE_BOOLEAN : ('true'|'false');

RULE_INT : ('0'..'9')+;

RULE_ID : ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|':'|'-')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
