/**
 * generated by Xtext 2.13.0
 */
package nii.bigclout.ecaadapter.dsl.impl;

import java.util.Collection;

import nii.bigclout.ecaadapter.dsl.Action;
import nii.bigclout.ecaadapter.dsl.DslPackage;
import nii.bigclout.ecaadapter.dsl.Element;
import nii.bigclout.ecaadapter.dsl.Specification;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Specification</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link nii.bigclout.ecaadapter.dsl.impl.SpecificationImpl#getSpecID <em>Spec ID</em>}</li>
 *   <li>{@link nii.bigclout.ecaadapter.dsl.impl.SpecificationImpl#getTrigger <em>Trigger</em>}</li>
 *   <li>{@link nii.bigclout.ecaadapter.dsl.impl.SpecificationImpl#getCondition <em>Condition</em>}</li>
 *   <li>{@link nii.bigclout.ecaadapter.dsl.impl.SpecificationImpl#getAction <em>Action</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SpecificationImpl extends MinimalEObjectImpl.Container implements Specification
{
  /**
   * The default value of the '{@link #getSpecID() <em>Spec ID</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSpecID()
   * @generated
   * @ordered
   */
  protected static final String SPEC_ID_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSpecID() <em>Spec ID</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSpecID()
   * @generated
   * @ordered
   */
  protected String specID = SPEC_ID_EDEFAULT;

  /**
   * The cached value of the '{@link #getTrigger() <em>Trigger</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTrigger()
   * @generated
   * @ordered
   */
  protected EList<Element> trigger;

  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected EList<Element> condition;

  /**
   * The cached value of the '{@link #getAction() <em>Action</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAction()
   * @generated
   * @ordered
   */
  protected EList<Action> action;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SpecificationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DslPackage.Literals.SPECIFICATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getSpecID()
  {
    return specID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSpecID(String newSpecID)
  {
    String oldSpecID = specID;
    specID = newSpecID;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.SPECIFICATION__SPEC_ID, oldSpecID, specID));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Element> getTrigger()
  {
    if (trigger == null)
    {
      trigger = new EObjectContainmentEList<Element>(Element.class, this, DslPackage.SPECIFICATION__TRIGGER);
    }
    return trigger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Element> getCondition()
  {
    if (condition == null)
    {
      condition = new EObjectContainmentEList<Element>(Element.class, this, DslPackage.SPECIFICATION__CONDITION);
    }
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Action> getAction()
  {
    if (action == null)
    {
      action = new EObjectContainmentEList<Action>(Action.class, this, DslPackage.SPECIFICATION__ACTION);
    }
    return action;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DslPackage.SPECIFICATION__TRIGGER:
        return ((InternalEList<?>)getTrigger()).basicRemove(otherEnd, msgs);
      case DslPackage.SPECIFICATION__CONDITION:
        return ((InternalEList<?>)getCondition()).basicRemove(otherEnd, msgs);
      case DslPackage.SPECIFICATION__ACTION:
        return ((InternalEList<?>)getAction()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DslPackage.SPECIFICATION__SPEC_ID:
        return getSpecID();
      case DslPackage.SPECIFICATION__TRIGGER:
        return getTrigger();
      case DslPackage.SPECIFICATION__CONDITION:
        return getCondition();
      case DslPackage.SPECIFICATION__ACTION:
        return getAction();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DslPackage.SPECIFICATION__SPEC_ID:
        setSpecID((String)newValue);
        return;
      case DslPackage.SPECIFICATION__TRIGGER:
        getTrigger().clear();
        getTrigger().addAll((Collection<? extends Element>)newValue);
        return;
      case DslPackage.SPECIFICATION__CONDITION:
        getCondition().clear();
        getCondition().addAll((Collection<? extends Element>)newValue);
        return;
      case DslPackage.SPECIFICATION__ACTION:
        getAction().clear();
        getAction().addAll((Collection<? extends Action>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.SPECIFICATION__SPEC_ID:
        setSpecID(SPEC_ID_EDEFAULT);
        return;
      case DslPackage.SPECIFICATION__TRIGGER:
        getTrigger().clear();
        return;
      case DslPackage.SPECIFICATION__CONDITION:
        getCondition().clear();
        return;
      case DslPackage.SPECIFICATION__ACTION:
        getAction().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.SPECIFICATION__SPEC_ID:
        return SPEC_ID_EDEFAULT == null ? specID != null : !SPEC_ID_EDEFAULT.equals(specID);
      case DslPackage.SPECIFICATION__TRIGGER:
        return trigger != null && !trigger.isEmpty();
      case DslPackage.SPECIFICATION__CONDITION:
        return condition != null && !condition.isEmpty();
      case DslPackage.SPECIFICATION__ACTION:
        return action != null && !action.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (specID: ");
    result.append(specID);
    result.append(')');
    return result.toString();
  }

} //SpecificationImpl
