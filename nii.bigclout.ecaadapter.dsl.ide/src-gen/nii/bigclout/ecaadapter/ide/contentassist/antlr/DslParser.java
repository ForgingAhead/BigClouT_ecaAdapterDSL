/*
 * generated by Xtext 2.13.0
 */
package nii.bigclout.ecaadapter.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import nii.bigclout.ecaadapter.ide.contentassist.antlr.internal.InternalDslParser;
import nii.bigclout.ecaadapter.services.DslGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class DslParser extends AbstractContentAssistParser {

	@Inject
	private DslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalDslParser createParser() {
		InternalDslParser result = new InternalDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAppMetaDataAccess().getGroup(), "rule__AppMetaData__Group__0");
					put(grammarAccess.getAppSpecificationAccess().getGroup(), "rule__AppSpecification__Group__0");
					put(grammarAccess.getElementAccess().getGroup(), "rule__Element__Group__0");
					put(grammarAccess.getRunTimeModelAccess().getAppDataAssignment(), "rule__RunTimeModel__AppDataAssignment");
					put(grammarAccess.getAppMetaDataAccess().getAppIDAssignment_0(), "rule__AppMetaData__AppIDAssignment_0");
					put(grammarAccess.getAppMetaDataAccess().getSpecificationsAssignment_1(), "rule__AppMetaData__SpecificationsAssignment_1");
					put(grammarAccess.getAppSpecificationAccess().getTriggerAssignment_1(), "rule__AppSpecification__TriggerAssignment_1");
					put(grammarAccess.getAppSpecificationAccess().getConditionAssignment_3(), "rule__AppSpecification__ConditionAssignment_3");
					put(grammarAccess.getAppSpecificationAccess().getActionAssignment_5(), "rule__AppSpecification__ActionAssignment_5");
					put(grammarAccess.getElementAccess().getMeaningAssignment_0(), "rule__Element__MeaningAssignment_0");
					put(grammarAccess.getElementAccess().getConceptAssignment_1(), "rule__Element__ConceptAssignment_1");
					put(grammarAccess.getConceptAccess().getReferenceNameAssignment(), "rule__Concept__ReferenceNameAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
