/*
 * generated by Xtext 2.13.0
 */
grammar InternalDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package nii.bigclout.ecaadapter.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package nii.bigclout.ecaadapter.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import nii.bigclout.ecaadapter.services.DslGrammarAccess;

}
@parser::members {
	private DslGrammarAccess grammarAccess;

	public void setGrammarAccess(DslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleRunTimeModel
entryRuleRunTimeModel
:
{ before(grammarAccess.getRunTimeModelRule()); }
	 ruleRunTimeModel
{ after(grammarAccess.getRunTimeModelRule()); } 
	 EOF 
;

// Rule RunTimeModel
ruleRunTimeModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRunTimeModelAccess().getAppDataAssignment()); }
		(rule__RunTimeModel__AppDataAssignment)*
		{ after(grammarAccess.getRunTimeModelAccess().getAppDataAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAppMetaData
entryRuleAppMetaData
:
{ before(grammarAccess.getAppMetaDataRule()); }
	 ruleAppMetaData
{ after(grammarAccess.getAppMetaDataRule()); } 
	 EOF 
;

// Rule AppMetaData
ruleAppMetaData 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAppMetaDataAccess().getGroup()); }
		(rule__AppMetaData__Group__0)
		{ after(grammarAccess.getAppMetaDataAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAppSpecification
entryRuleAppSpecification
:
{ before(grammarAccess.getAppSpecificationRule()); }
	 ruleAppSpecification
{ after(grammarAccess.getAppSpecificationRule()); } 
	 EOF 
;

// Rule AppSpecification
ruleAppSpecification 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAppSpecificationAccess().getGroup()); }
		(rule__AppSpecification__Group__0)
		{ after(grammarAccess.getAppSpecificationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleElement
entryRuleElement
:
{ before(grammarAccess.getElementRule()); }
	 ruleElement
{ after(grammarAccess.getElementRule()); } 
	 EOF 
;

// Rule Element
ruleElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getElementAccess().getGroup()); }
		(rule__Element__Group__0)
		{ after(grammarAccess.getElementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConcept
entryRuleConcept
:
{ before(grammarAccess.getConceptRule()); }
	 ruleConcept
{ after(grammarAccess.getConceptRule()); } 
	 EOF 
;

// Rule Concept
ruleConcept 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConceptAccess().getReferenceNameAssignment()); }
		(rule__Concept__ReferenceNameAssignment)
		{ after(grammarAccess.getConceptAccess().getReferenceNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AppMetaData__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AppMetaData__Group__0__Impl
	rule__AppMetaData__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AppMetaData__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppMetaDataAccess().getAppIDAssignment_0()); }
	(rule__AppMetaData__AppIDAssignment_0)
	{ after(grammarAccess.getAppMetaDataAccess().getAppIDAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AppMetaData__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AppMetaData__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AppMetaData__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppMetaDataAccess().getSpecificationsAssignment_1()); }
	(rule__AppMetaData__SpecificationsAssignment_1)*
	{ after(grammarAccess.getAppMetaDataAccess().getSpecificationsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AppSpecification__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AppSpecification__Group__0__Impl
	rule__AppSpecification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AppSpecification__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppSpecificationAccess().getONKeyword_0()); }
	'ON'
	{ after(grammarAccess.getAppSpecificationAccess().getONKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AppSpecification__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AppSpecification__Group__1__Impl
	rule__AppSpecification__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AppSpecification__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppSpecificationAccess().getTriggerAssignment_1()); }
	(rule__AppSpecification__TriggerAssignment_1)*
	{ after(grammarAccess.getAppSpecificationAccess().getTriggerAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AppSpecification__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AppSpecification__Group__2__Impl
	rule__AppSpecification__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AppSpecification__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppSpecificationAccess().getIFKeyword_2()); }
	'IF'
	{ after(grammarAccess.getAppSpecificationAccess().getIFKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AppSpecification__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AppSpecification__Group__3__Impl
	rule__AppSpecification__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AppSpecification__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppSpecificationAccess().getConditionAssignment_3()); }
	(rule__AppSpecification__ConditionAssignment_3)*
	{ after(grammarAccess.getAppSpecificationAccess().getConditionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AppSpecification__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AppSpecification__Group__4__Impl
	rule__AppSpecification__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__AppSpecification__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppSpecificationAccess().getDOKeyword_4()); }
	'DO'
	{ after(grammarAccess.getAppSpecificationAccess().getDOKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AppSpecification__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AppSpecification__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AppSpecification__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppSpecificationAccess().getActionAssignment_5()); }
	(rule__AppSpecification__ActionAssignment_5)
	{ after(grammarAccess.getAppSpecificationAccess().getActionAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Element__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Element__Group__0__Impl
	rule__Element__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementAccess().getMeaningAssignment_0()); }
	(rule__Element__MeaningAssignment_0)
	{ after(grammarAccess.getElementAccess().getMeaningAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Element__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementAccess().getConceptAssignment_1()); }
	(rule__Element__ConceptAssignment_1)
	{ after(grammarAccess.getElementAccess().getConceptAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RunTimeModel__AppDataAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRunTimeModelAccess().getAppDataAppMetaDataParserRuleCall_0()); }
		ruleAppMetaData
		{ after(grammarAccess.getRunTimeModelAccess().getAppDataAppMetaDataParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AppMetaData__AppIDAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAppMetaDataAccess().getAppIDIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getAppMetaDataAccess().getAppIDIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AppMetaData__SpecificationsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAppMetaDataAccess().getSpecificationsAppSpecificationParserRuleCall_1_0()); }
		ruleAppSpecification
		{ after(grammarAccess.getAppMetaDataAccess().getSpecificationsAppSpecificationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AppSpecification__TriggerAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAppSpecificationAccess().getTriggerElementParserRuleCall_1_0()); }
		ruleElement
		{ after(grammarAccess.getAppSpecificationAccess().getTriggerElementParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AppSpecification__ConditionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAppSpecificationAccess().getConditionElementParserRuleCall_3_0()); }
		ruleElement
		{ after(grammarAccess.getAppSpecificationAccess().getConditionElementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AppSpecification__ActionAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAppSpecificationAccess().getActionElementParserRuleCall_5_0()); }
		ruleElement
		{ after(grammarAccess.getAppSpecificationAccess().getActionElementParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__MeaningAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElementAccess().getMeaningIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getElementAccess().getMeaningIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__ConceptAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElementAccess().getConceptConceptParserRuleCall_1_0()); }
		ruleConcept
		{ after(grammarAccess.getElementAccess().getConceptConceptParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Concept__ReferenceNameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConceptAccess().getReferenceNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getConceptAccess().getReferenceNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
